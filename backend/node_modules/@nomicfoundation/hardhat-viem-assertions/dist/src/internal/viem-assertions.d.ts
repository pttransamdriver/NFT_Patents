import type { HardhatViemAssertions } from "../types.js";
import type { ContractAbis, ContractReturnType, HardhatViemHelpers } from "@nomicfoundation/hardhat-viem/types";
import type { ChainType } from "hardhat/types/network";
import type { Address, ContractEventName, Hash, ReadContractReturnType, WriteContractReturnType } from "viem";
export declare class HardhatViemAssertionsImpl<ChainTypeT extends ChainType | string = "generic"> implements HardhatViemAssertions {
    #private;
    constructor(viem: HardhatViemHelpers<ChainTypeT>);
    balancesHaveChanged(resolvedTxHash: Promise<Hash>, changes: Array<{
        address: Address;
        amount: bigint;
    }>): Promise<void>;
    emit<ContractName extends keyof ContractAbis, EventName extends ContractEventName<ContractAbis[ContractName]>>(contractFn: Promise<ReadContractReturnType | WriteContractReturnType>, contract: ContractReturnType<ContractName>, eventName: EventName): Promise<void>;
    emitWithArgs<ContractName extends keyof ContractAbis, EventName extends ContractEventName<ContractAbis[ContractName]>>(contractFn: Promise<ReadContractReturnType | WriteContractReturnType>, contract: ContractReturnType<ContractName>, eventName: EventName, args: any[]): Promise<void>;
    revert(contractFn: Promise<ReadContractReturnType | WriteContractReturnType>): Promise<void>;
    revertWith(contractFn: Promise<ReadContractReturnType | WriteContractReturnType>, expectedRevertReason: string): Promise<void>;
    revertWithCustomError<ContractName extends keyof ContractAbis>(contractFn: Promise<ReadContractReturnType | WriteContractReturnType>, contract: ContractReturnType<ContractName>, customErrorName: string): Promise<void>;
    revertWithCustomErrorWithArgs<ContractName extends keyof ContractAbis>(contractFn: Promise<ReadContractReturnType | WriteContractReturnType>, contract: ContractReturnType<ContractName>, customErrorName: string, args: any[]): Promise<void>;
}
//# sourceMappingURL=viem-assertions.d.ts.map