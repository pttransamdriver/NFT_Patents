import path from "node:path";
import { HardhatError } from "@nomicfoundation/hardhat-errors";
import { exists, readdir, readJsonFile, remove, writeJsonFile, } from "@nomicfoundation/hardhat-utils/fs";
const taskMigrate = async ({ deploymentId }, hre) => {
    const deploymentDir = path.join(hre.config.paths.ignition, "deployments", deploymentId);
    if (!(await exists(deploymentDir))) {
        throw new HardhatError(HardhatError.ERRORS.IGNITION.TRACK_TRANSACTIONS.DEPLOYMENT_DIR_NOT_FOUND, {
            deploymentDir,
        });
    }
    const artifactsDir = `${deploymentDir}/artifacts`;
    const buildInfoPathsToUpdate = [];
    for (const filename of await readdir(artifactsDir)) {
        if (filename.endsWith(".dbg.json")) {
            continue;
        }
        const artifactPath = path.join(artifactsDir, filename);
        const artifact = await readJsonFile(artifactPath);
        if (artifact._format === "hh-sol-artifact-1") {
            const newArtifact = {
                ...artifact,
                _format: "hh3-artifact-1",
                inputSourceName: artifact.sourceName,
                immutableReferences: {},
            };
            const debugFilePath = path.join(artifactsDir, `${filename.split(".json")[0]}.dbg.json`);
            if (await exists(debugFilePath)) {
                const debugFile = await readJsonFile(debugFilePath);
                const buildInfoPath = path.resolve(artifactsDir, debugFile.buildInfo);
                const { output, id, solcVersion, } = await readJsonFile(buildInfoPath);
                newArtifact.buildInfoId = `solc-${solcVersion.replaceAll(".", "_")}-${id}`;
                newArtifact.immutableReferences =
                    output.contracts[artifact.sourceName][artifact.contractName].evm
                        .deployedBytecode.immutableReferences ?? {};
                buildInfoPathsToUpdate.push(buildInfoPath);
                await remove(debugFilePath);
            }
            await writeJsonFile(artifactPath, newArtifact);
        }
    }
    for (const buildInfoPath of [...new Set(buildInfoPathsToUpdate)]) {
        const buildInfo = await readJsonFile(buildInfoPath);
        delete buildInfo.output;
        if (buildInfo._format === "hh-sol-build-info-1") {
            const userSourceNameMap = {};
            for (const key of Object.keys(buildInfo.input.sources)) {
                userSourceNameMap[key] = key;
            }
            const updatedId = `solc-${buildInfo.solcVersion.replaceAll(".", "_")}-${buildInfo.id}`;
            const newBuildInfo = {
                ...buildInfo,
                userSourceNameMap,
                _format: "hh3-sol-build-info-1",
                id: updatedId,
            };
            await writeJsonFile(path.join(path.dirname(buildInfoPath), `${updatedId}.json`), newBuildInfo);
            await remove(buildInfoPath);
        }
    }
};
export default taskMigrate;
//# sourceMappingURL=migrate.js.map