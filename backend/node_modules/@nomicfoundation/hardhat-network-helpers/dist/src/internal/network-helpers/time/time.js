import { bindAllMethods } from "@nomicfoundation/hardhat-utils/lang";
import { Duration } from "../duration/duration.js";
import { increaseTo } from "./helpers/increase-to.js";
import { increase } from "./helpers/increase.js";
import { latestBlock } from "./helpers/latest-block.js";
import { latest } from "./helpers/latest.js";
import { setNextBlockTimestamp } from "./helpers/set-next-block-timestamp.js";
export class Time {
    #networkHelpers;
    #provider;
    duration;
    constructor(networkHelpers, provider) {
        this.#networkHelpers = networkHelpers;
        this.#provider = provider;
        this.duration = new Duration();
        bindAllMethods(this);
    }
    async increase(amountInSeconds) {
        await this.#networkHelpers.throwIfNotDevelopmentNetwork();
        return increase(this.#provider, this.#networkHelpers, amountInSeconds);
    }
    async increaseTo(timestamp) {
        await this.#networkHelpers.throwIfNotDevelopmentNetwork();
        return increaseTo(this.#provider, this.#networkHelpers, timestamp, this.duration);
    }
    async latest() {
        await this.#networkHelpers.throwIfNotDevelopmentNetwork();
        return latest(this.#provider);
    }
    async latestBlock() {
        await this.#networkHelpers.throwIfNotDevelopmentNetwork();
        return latestBlock(this.#provider);
    }
    async setNextBlockTimestamp(timestamp) {
        await this.#networkHelpers.throwIfNotDevelopmentNetwork();
        return setNextBlockTimestamp(this.#provider, timestamp, this.duration);
    }
}
//# sourceMappingURL=time.js.map