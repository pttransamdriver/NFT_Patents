import { assertHardhatInvariant, HardhatError, } from "@nomicfoundation/hardhat-errors";
import { bindAllMethods } from "@nomicfoundation/hardhat-utils/lang";
import { dropTransaction } from "./helpers/drop-transaction.js";
import { getStorageAt } from "./helpers/get-storage-at.js";
import { impersonateAccount } from "./helpers/impersonate-account.js";
import { loadFixture } from "./helpers/load-fixture.js";
import { mineUpTo } from "./helpers/mine-up-to.js";
import { mine } from "./helpers/mine.js";
import { setBalance } from "./helpers/set-balance.js";
import { setBlockGasLimit } from "./helpers/set-block-gas-limit.js";
import { setCode } from "./helpers/set-code.js";
import { setCoinbase } from "./helpers/set-coinbase.js";
import { setNextBlockBaseFeePerGas } from "./helpers/set-next-block-base-fee-per-gas.js";
import { setNonce } from "./helpers/set-nonce.js";
import { setPrevRandao } from "./helpers/set-prev-randao.js";
import { setStorageAt } from "./helpers/set-storage-at.js";
import { stopImpersonatingAccount } from "./helpers/stop-impersonating-account.js";
import { takeSnapshot } from "./helpers/take-snapshot.js";
import { Time } from "./time/time.js";
const SUPPORTED_TEST_NETWORKS = ["hardhat", "zksync", "anvil"];
export class NetworkHelpers {
    #provider;
    #networkName;
    #snapshots = [];
    #isDevelopmentNetwork;
    #version;
    time;
    constructor(provider, networkName) {
        this.#provider = provider;
        this.#networkName = networkName;
        this.time = new Time(this, provider);
        bindAllMethods(this);
    }
    clearSnapshots() {
        this.#snapshots = [];
    }
    async dropTransaction(txHash) {
        await this.throwIfNotDevelopmentNetwork();
        return dropTransaction(this.#provider, txHash);
    }
    async getStorageAt(address, index, block = "latest") {
        await this.throwIfNotDevelopmentNetwork();
        return getStorageAt(this.#provider, address, index, block);
    }
    async impersonateAccount(address) {
        await this.throwIfNotDevelopmentNetwork();
        return impersonateAccount(this.#provider, address);
    }
    async loadFixture(fixture) {
        await this.throwIfNotDevelopmentNetwork();
        const { snapshots, snapshotData } = await loadFixture(this, fixture, this.#snapshots);
        this.#snapshots = snapshots;
        return snapshotData;
    }
    async mine(blocks = 1, options = { interval: 1 }) {
        await this.throwIfNotDevelopmentNetwork();
        return mine(this.#provider, blocks, options);
    }
    async mineUpTo(blockNumber) {
        await this.throwIfNotDevelopmentNetwork();
        return mineUpTo(this.#provider, blockNumber, this.time);
    }
    async setBalance(address, balance) {
        await this.throwIfNotDevelopmentNetwork();
        return setBalance(this.#provider, address, balance);
    }
    async setBlockGasLimit(blockGasLimit) {
        await this.throwIfNotDevelopmentNetwork();
        return setBlockGasLimit(this.#provider, blockGasLimit);
    }
    async setCode(address, code) {
        await this.throwIfNotDevelopmentNetwork();
        return setCode(this.#provider, address, code);
    }
    async setCoinbase(address) {
        await this.throwIfNotDevelopmentNetwork();
        return setCoinbase(this.#provider, address);
    }
    async setNextBlockBaseFeePerGas(baseFeePerGas) {
        await this.throwIfNotDevelopmentNetwork();
        return setNextBlockBaseFeePerGas(this.#provider, baseFeePerGas);
    }
    async setNonce(address, nonce) {
        await this.throwIfNotDevelopmentNetwork();
        return setNonce(this.#provider, address, nonce);
    }
    async setPrevRandao(prevRandao) {
        await this.throwIfNotDevelopmentNetwork();
        return setPrevRandao(this.#provider, prevRandao);
    }
    async setStorageAt(address, index, value) {
        await this.throwIfNotDevelopmentNetwork();
        return setStorageAt(this.#provider, address, index, value);
    }
    async stopImpersonatingAccount(address) {
        await this.throwIfNotDevelopmentNetwork();
        return stopImpersonatingAccount(this.#provider, address);
    }
    async takeSnapshot() {
        await this.throwIfNotDevelopmentNetwork();
        return takeSnapshot(this.#provider);
    }
    async throwIfNotDevelopmentNetwork() {
        if (this.#isDevelopmentNetwork === undefined) {
            const version = await this.#provider.request({
                method: "web3_clientVersion",
            });
            assertHardhatInvariant(typeof version === "string", `"version" should be a string`);
            this.#version = version;
            this.#isDevelopmentNetwork = SUPPORTED_TEST_NETWORKS.some((network) => this.#version?.toLowerCase().startsWith(network) === true);
        }
        if (!this.#isDevelopmentNetwork) {
            if (this.#version !== undefined) {
                throw new HardhatError(HardhatError.ERRORS.NETWORK_HELPERS.GENERAL.CAN_ONLY_BE_USED_WITH_HARDHAT_NETWORK_VERSIONED, {
                    networkName: this.#networkName,
                    version: this.#version,
                });
            }
            throw new HardhatError(HardhatError.ERRORS.NETWORK_HELPERS.GENERAL.CAN_ONLY_BE_USED_WITH_HARDHAT_NETWORK, {
                networkName: this.#networkName,
            });
        }
    }
}
//# sourceMappingURL=network-helpers.js.map