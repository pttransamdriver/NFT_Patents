import { HardhatError } from "@nomicfoundation/hardhat-errors";
import { applyNewMessage, loadDeploymentState, } from "./execution/deployment-state-helpers.js";
import { JournalMessageType } from "./execution/types/messages.js";
export class Wiper {
    _deploymentLoader;
    constructor(_deploymentLoader) {
        this._deploymentLoader = _deploymentLoader;
    }
    async wipe(futureId) {
        const deploymentState = await loadDeploymentState(this._deploymentLoader);
        if (deploymentState === undefined) {
            throw new HardhatError(HardhatError.ERRORS.IGNITION.WIPE.UNINITIALIZED_DEPLOYMENT, {
                futureId,
            });
        }
        const executionState = deploymentState.executionStates[futureId];
        if (executionState === undefined) {
            throw new HardhatError(HardhatError.ERRORS.IGNITION.WIPE.NO_STATE_FOR_FUTURE, { futureId });
        }
        const dependents = Object.values(deploymentState.executionStates).filter((psm) => psm.dependencies.has(futureId));
        if (dependents.length > 0) {
            throw new HardhatError(HardhatError.ERRORS.IGNITION.WIPE.DEPENDENT_FUTURES, {
                futureId,
                dependents: dependents.map((d) => d.id).join(", "),
            });
        }
        const wipeMessage = {
            type: JournalMessageType.WIPE_APPLY,
            futureId,
        };
        return applyNewMessage(wipeMessage, deploymentState, this._deploymentLoader);
    }
}
//# sourceMappingURL=wiper.js.map