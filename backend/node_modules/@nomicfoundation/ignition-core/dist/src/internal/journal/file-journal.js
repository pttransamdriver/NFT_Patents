import fs, { closeSync, constants, openSync, writeFileSync } from "node:fs";
import { parse } from "ndjson";
import { deserializeReplacer } from "./utils/deserialize-replacer.js";
import { emitExecutionEvent } from "./utils/emitExecutionEvent.js";
import { serializeReplacer } from "./utils/serialize-replacer.js";
/**
 * A file-based journal.
 *
 * @beta
 */
export class FileJournal {
    _filePath;
    _executionEventListener;
    constructor(_filePath, _executionEventListener) {
        this._filePath = _filePath;
        this._executionEventListener = _executionEventListener;
    }
    record(message) {
        this._log(message);
        this._appendJsonLine(this._filePath, message);
    }
    async *read() {
        if (!fs.existsSync(this._filePath)) {
            return;
        }
        const stream = fs.createReadStream(this._filePath).pipe(parse());
        for await (const chunk of stream) {
            const json = JSON.stringify(chunk);
            const deserializedChunk = JSON.parse(json, deserializeReplacer.bind(this));
            yield deserializedChunk;
        }
    }
    _appendJsonLine(path, value) {
        const flags = constants.O_CREAT |
            constants.O_WRONLY | // Write only
            constants.O_APPEND | // Append
            constants.O_DSYNC; // Synchronous I/O waiting for writes of content and metadata
        const fd = openSync(path, flags);
        writeFileSync(fd, `\n${JSON.stringify(value, serializeReplacer.bind(this))}`, "utf-8");
        closeSync(fd);
    }
    _log(message) {
        if (this._executionEventListener !== undefined) {
            emitExecutionEvent(message, this._executionEventListener);
        }
    }
}
//# sourceMappingURL=file-journal.js.map