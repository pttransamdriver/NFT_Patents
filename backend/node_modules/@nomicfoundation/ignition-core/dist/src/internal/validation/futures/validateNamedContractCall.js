import { HardhatError } from "@nomicfoundation/hardhat-errors";
import { isAccountRuntimeValue, isArtifactType, isModuleParameterRuntimeValue, } from "../../../type-guards.js";
import { validateArtifactFunction } from "../../execution/abi.js";
import { filterToAccountRuntimeValues, resolvePotentialModuleParameterValueFrom, retrieveNestedRuntimeValues, validateAccountRuntimeValue, } from "../utils.js";
export async function validateNamedContractCall(future, artifactLoader, deploymentParameters, accounts) {
    const errors = [];
    /* stage one */
    const artifact = "artifact" in future.contract
        ? future.contract.artifact
        : await artifactLoader.loadArtifact(future.contract.contractName);
    if (!isArtifactType(artifact)) {
        errors.push(new HardhatError(HardhatError.ERRORS.IGNITION.VALIDATION.INVALID_ARTIFACT, {
            contractName: future.contract.contractName,
        }));
    }
    else {
        errors.push(...validateArtifactFunction(artifact, future.contract.contractName, future.functionName, future.args, false));
    }
    /* stage two */
    const runtimeValues = retrieveNestedRuntimeValues(future.args);
    const moduleParams = runtimeValues.filter(isModuleParameterRuntimeValue);
    const accountParams = [
        ...filterToAccountRuntimeValues(runtimeValues),
        ...(isAccountRuntimeValue(future.from) ? [future.from] : []),
    ];
    errors.push(...accountParams.flatMap((arv) => validateAccountRuntimeValue(arv, accounts)));
    const missingParams = moduleParams.filter((param) => resolvePotentialModuleParameterValueFrom(deploymentParameters, param) ===
        undefined);
    if (missingParams.length > 0) {
        errors.push(new HardhatError(HardhatError.ERRORS.IGNITION.VALIDATION.MISSING_MODULE_PARAMETER, {
            name: missingParams[0].name,
        }));
    }
    if (isModuleParameterRuntimeValue(future.value)) {
        const param = resolvePotentialModuleParameterValueFrom(deploymentParameters, future.value);
        if (param === undefined) {
            errors.push(new HardhatError(HardhatError.ERRORS.IGNITION.VALIDATION.MISSING_MODULE_PARAMETER, {
                name: future.value.name,
            }));
        }
        else if (typeof param !== "bigint") {
            errors.push(new HardhatError(HardhatError.ERRORS.IGNITION.VALIDATION.INVALID_MODULE_PARAMETER_TYPE, {
                name: future.value.name,
                expectedType: "bigint",
                actualType: typeof param,
            }));
        }
    }
    return errors.map((e) => e.message);
}
//# sourceMappingURL=validateNamedContractCall.js.map